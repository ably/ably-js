{
  "version": 3,
  "sources": ["../src/plugins/push/index.ts", "../src/plugins/push/pushchannel.ts", "../src/plugins/push/getW3CDeviceDetails.ts", "../src/plugins/push/pushactivation.ts"],
  "sourcesContent": ["import PushChannel from './pushchannel';\nimport { getW3CPushDeviceDetails } from './getW3CDeviceDetails';\nimport { ActivationStateMachine, CalledActivate, CalledDeactivate, localDeviceFactory } from './pushactivation';\n\nexport {\n  ActivationStateMachine,\n  localDeviceFactory,\n  CalledActivate,\n  CalledDeactivate,\n  PushChannel,\n  getW3CPushDeviceDetails,\n};\n\nexport default {\n  ActivationStateMachine,\n  localDeviceFactory,\n  CalledActivate,\n  CalledDeactivate,\n  PushChannel,\n  getW3CPushDeviceDetails,\n};\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\nimport type RestChannel from 'common/lib/client/restchannel';\nimport type { LocalDevice } from 'plugins/push/pushactivation';\n\nclass PushChannel {\n  client: BaseClient;\n  channel: RestChannel | RealtimeChannel;\n\n  constructor(channel: RestChannel | RealtimeChannel) {\n    this.channel = channel;\n    this.client = channel.client;\n  }\n\n  async subscribeDevice() {\n    const client = this.client;\n    const device = client.device as LocalDevice;\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\n      body = { deviceId: device.id, channel: this.channel.name },\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\n\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\n\n    client.Utils.mixin(headers, this._getPushAuthHeaders());\n\n    const requestBody = client.Utils.encodeBody(body, client._MsgPack, format);\n    await client.rest.Resource.post(client, '/push/channelSubscriptions', requestBody, headers, {}, format, true);\n  }\n\n  async unsubscribeDevice() {\n    const client = this.client;\n    const device = client.device as LocalDevice;\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\n\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\n\n    client.Utils.mixin(headers, this._getPushAuthHeaders());\n\n    await client.rest.Resource.delete(\n      client,\n      '/push/channelSubscriptions',\n      headers,\n      { deviceId: device.id, channel: this.channel.name },\n      format,\n      true,\n    );\n  }\n\n  async subscribeClient() {\n    const client = this.client;\n    const clientId = this.client.auth.clientId;\n    if (!clientId) {\n      throw new this.client.ErrorInfo('Cannot subscribe from client without client ID', 50000, 500);\n    }\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\n      body = { clientId: clientId, channel: this.channel.name },\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\n\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\n\n    const requestBody = client.Utils.encodeBody(body, client._MsgPack, format);\n    await client.rest.Resource.post(client, '/push/channelSubscriptions', requestBody, headers, {}, format, true);\n  }\n\n  async unsubscribeClient() {\n    const client = this.client;\n\n    const clientId = this.client.auth.clientId;\n    if (!clientId) {\n      throw new this.client.ErrorInfo('Cannot unsubscribe from client without client ID', 50000, 500);\n    }\n    const format = client.options.useBinaryProtocol ? client.Utils.Format.msgpack : client.Utils.Format.json,\n      headers = client.Defaults.defaultPostHeaders(client.options, { format });\n\n    if (client.options.headers) client.Utils.mixin(headers, client.options.headers);\n\n    await client.rest.Resource.delete(\n      client,\n      '/push/channelSubscriptions',\n      headers,\n      { clientId: clientId, channel: this.channel.name },\n      format,\n      true,\n    );\n  }\n\n  async listSubscriptions(params?: Record<string, string>) {\n    this.client.Logger.logAction(\n      this.client.logger,\n      this.client.Logger.LOG_MICRO,\n      'PushChannel.listSubscriptions()',\n      'channel = ' + this.channel.name,\n    );\n\n    return this.client.push.admin.channelSubscriptions.list({\n      ...params,\n      channel: this.channel.name,\n      concatFilters: true,\n    });\n  }\n\n  private _getDeviceIdentityToken() {\n    const device = this.client.device as LocalDevice;\n    const deviceIdentityToken = device.deviceIdentityToken;\n    if (deviceIdentityToken) {\n      return deviceIdentityToken;\n    } else {\n      throw new this.client.ErrorInfo('Cannot subscribe from client without deviceIdentityToken', 50000, 500);\n    }\n  }\n\n  private _getPushAuthHeaders() {\n    const deviceIdentityToken = this._getDeviceIdentityToken();\n    return { 'X-Ably-DeviceToken': deviceIdentityToken };\n  }\n}\n\nexport default PushChannel;\n", "import { ActivationStateMachine } from 'plugins/push/pushactivation';\n\nfunction toBase64Url(arrayBuffer: ArrayBuffer) {\n  const buffer = new Uint8Array(arrayBuffer.slice(0, arrayBuffer.byteLength));\n  return btoa(String.fromCharCode.apply(null, Array.from(buffer)));\n}\n\nfunction urlBase64ToBase64(base64String: string) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  return base64;\n}\n\nfunction base64ToUint8Array(base64String: string) {\n  const rawData = window.atob(base64String);\n  const rawDataChars = [];\n  for (let i = 0; i < rawData.length; i++) {\n    rawDataChars.push(rawData[i].charCodeAt(0));\n  }\n  return Uint8Array.from(rawDataChars);\n}\n\nexport async function getW3CPushDeviceDetails(machine: ActivationStateMachine) {\n  const GettingPushDeviceDetailsFailed = machine.GettingPushDeviceDetailsFailed;\n  const GotPushDeviceDetails = machine.GotPushDeviceDetails;\n  const { ErrorInfo, Defaults } = machine.client;\n\n  const permission = await Notification.requestPermission();\n\n  if (permission !== 'granted') {\n    machine.handleEvent(\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('User denied permission to send notifications', 400, 40000)),\n    );\n    return;\n  }\n\n  const swUrl = machine.client.options.pushServiceWorkerUrl;\n  if (!swUrl) {\n    machine.handleEvent(\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('Missing ClientOptions.pushServiceWorkerUrl', 400, 40000)),\n    );\n    return;\n  }\n\n  try {\n    const worker = await navigator.serviceWorker.register(swUrl);\n\n    machine._pushManager = worker.pushManager;\n\n    const headers = Defaults.defaultGetHeaders(machine.client.options, { format: 'text' });\n    const appServerKey = (\n      await machine.client.rest.Resource.get(machine.client, '/push/publicVapidKey', headers, {}, null, true)\n    ).body as string;\n\n    if (!worker.active) {\n      await navigator.serviceWorker.ready;\n    }\n\n    const subscription = await worker.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: base64ToUint8Array(urlBase64ToBase64(appServerKey)),\n    });\n\n    const endpoint = subscription.endpoint;\n\n    const [p256dh, auth] = [subscription.getKey('p256dh'), subscription.getKey('auth')];\n\n    if (!p256dh || !auth) {\n      throw new ErrorInfo('Public key not found', 50000, 500);\n    }\n\n    const device = machine.client.device;\n    device.push.recipient = {\n      transportType: 'web',\n      targetUrl: btoa(endpoint),\n      publicVapidKey: appServerKey,\n      encryptionKey: {\n        p256dh: toBase64Url(p256dh),\n        auth: toBase64Url(auth),\n      },\n    };\n    device.persist();\n\n    machine.handleEvent(new GotPushDeviceDetails());\n  } catch (err) {\n    machine.handleEvent(\n      new GettingPushDeviceDetailsFailed(new ErrorInfo('Failed to register service worker', 50000, 500, err as Error)),\n    );\n  }\n}\n", "import * as API from '../../../ably';\nimport { IPlatformPushConfig } from 'common/types/IPlatformConfig';\nimport { ulid } from 'ulid';\nimport type { ErrCallback, StandardCallback } from 'common/types/utils';\nimport type ErrorInfo from 'common/lib/types/errorinfo';\nimport DeviceDetails, { DevicePlatform, DevicePushDetails } from 'common/lib/types/devicedetails';\nimport { getW3CPushDeviceDetails } from './getW3CDeviceDetails';\nimport type BaseClient from 'common/lib/client/baseclient';\n\nconst persistKeys = {\n  deviceId: 'ably.push.deviceId',\n  deviceSecret: 'ably.push.deviceSecret',\n  deviceIdentityToken: 'ably.push.deviceIdentityToken',\n  pushRecipient: 'ably.push.pushRecipient',\n  activationState: 'ably.push.activationState',\n};\n\ntype DeviceRegistration = Required<{\n  [K in keyof DeviceDetails]: K extends 'deviceIdentityToken' ? API.TokenDetails : DeviceDetails[K];\n}>;\n\nexport type RegisterCallback = (device: DeviceDetails, callback: StandardCallback<DeviceRegistration>) => void;\nexport type DeregisterCallback = (device: DeviceDetails, callback: StandardCallback<string>) => void;\n\nexport interface LocalDeviceAuthDetails {\n  headers: Record<string, string>;\n  params: Record<string, unknown>;\n}\n\nexport type LocalDeviceFactory = ReturnType<typeof localDeviceFactory>;\nexport type LocalDevice = ReturnType<LocalDeviceFactory['load']>;\n\n/**\n * LocalDevice extends DeviceDetails, but DeviceDetails is part of core ably-js and LocalDevice is part of the Push plugin\n * In order to avoid bundling the DeviceDetails class in both core ably-js and the plugin, the LocalDevice is exported as\n * a factory, and the DeviceDetails constructor is used to create the class declaration for LocalDevice when the plugin is\n * loaded.\n */\nexport function localDeviceFactory(deviceDetails: typeof DeviceDetails) {\n  return class LocalDevice extends deviceDetails {\n    rest: BaseClient;\n    push: DevicePushDetails;\n\n    private constructor(rest: BaseClient) {\n      super();\n      this.push = {};\n      this.rest = rest;\n    }\n\n    static load(rest: BaseClient) {\n      const device = new LocalDevice(rest);\n      device.loadPersisted();\n      return device;\n    }\n\n    loadPersisted() {\n      const Platform = this.rest.Platform;\n      if (!Platform.Config.push) {\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\n      }\n      this.platform = Platform.Config.push.platform;\n      this.clientId = this.rest.auth.clientId ?? undefined;\n      this.formFactor = Platform.Config.push.formFactor;\n      this.id = Platform.Config.push.storage.get(persistKeys.deviceId);\n\n      if (this.id) {\n        this.deviceSecret = Platform.Config.push.storage.get(persistKeys.deviceSecret) || undefined;\n        this.deviceIdentityToken = JSON.parse(\n          Platform.Config.push.storage.get(persistKeys.deviceIdentityToken) || 'null',\n        );\n        this.push.recipient = JSON.parse(Platform.Config.push.storage.get(persistKeys.pushRecipient) || 'null');\n      } else {\n        this.resetId();\n      }\n    }\n\n    persist() {\n      const config = this.rest.Platform.Config;\n      if (!config.push) {\n        throw new this.rest.ErrorInfo('Push activation is not available on this platform', 40000, 400);\n      }\n      if (this.id) {\n        config.push.storage.set(persistKeys.deviceId, this.id);\n      }\n      if (this.deviceSecret) {\n        config.push.storage.set(persistKeys.deviceSecret, this.deviceSecret);\n      }\n      if (this.deviceIdentityToken) {\n        config.push.storage.set(persistKeys.deviceIdentityToken, JSON.stringify(this.deviceIdentityToken));\n      }\n      if (this.push.recipient) {\n        config.push.storage.set(persistKeys.pushRecipient, JSON.stringify(this.push.recipient));\n      }\n    }\n\n    resetId() {\n      this.id = ulid();\n      this.deviceSecret = ulid();\n      this.persist();\n    }\n\n    getAuthDetails(\n      rest: BaseClient,\n      headers: Record<string, string>,\n      params: Record<string, unknown>,\n    ): LocalDeviceAuthDetails {\n      if (!this.deviceIdentityToken) {\n        throw new this.rest.ErrorInfo('Unable to update device registration; no deviceIdentityToken', 50000, 500);\n      }\n      if (this.rest.http.supportsAuthHeaders) {\n        return {\n          headers: rest.Utils.mixin(\n            { authorization: 'Bearer ' + rest.Utils.toBase64(this.deviceIdentityToken) },\n            headers,\n          ) as Record<string, string>,\n          params,\n        };\n      } else {\n        return { headers, params: rest.Utils.mixin({ access_token: this.deviceIdentityToken }, params) };\n      }\n    }\n  };\n}\n\nexport class ActivationStateMachine {\n  client: BaseClient;\n  current: ActivationState;\n  pendingEvents: ActivationEvent[];\n  handling: boolean;\n  deactivatedCallback?: ErrCallback;\n  activatedCallback?: ErrCallback;\n  _pushConfig?: IPlatformPushConfig;\n  registerCallback?: RegisterCallback;\n  deregisterCallback?: DeregisterCallback;\n  updateFailedCallback?: ErrCallback;\n\n  // Used for testing\n  _pushManager?: PushManager;\n\n  // exported for testing\n  GettingPushDeviceDetailsFailed = GettingPushDeviceDetailsFailed;\n  GotPushDeviceDetails = GotPushDeviceDetails;\n\n  constructor(rest: BaseClient) {\n    this.client = rest;\n    this._pushConfig = rest.Platform.Config.push;\n    this.current = new ActivationStates[\n      (this.pushConfig.storage.get(persistKeys.activationState) as ActivationStateName) || 'NotActivated'\n    ](null);\n    this.pendingEvents = [];\n    this.handling = false;\n  }\n\n  get pushConfig() {\n    if (!this._pushConfig) {\n      throw new this.client.ErrorInfo('This platform is not supported as a target of push notifications', 40000, 400);\n    }\n    return this._pushConfig;\n  }\n\n  persist() {\n    if (isPersistentState(this.current)) {\n      this.pushConfig.storage.set(persistKeys.activationState, this.current.name);\n    }\n  }\n\n  callUpdateRegistrationFailedCallback(reason: ErrorInfo) {\n    if (this.updateFailedCallback) {\n      this.updateFailedCallback(reason);\n    } else {\n      this.client.Logger.logAction(\n        this.client.logger,\n        this.client.Logger.LOG_ERROR,\n        'UpdateRegistrationFailed',\n        'Failed updating device push registration: ' + this.client.Utils.inspectError(reason),\n      );\n    }\n  }\n\n  callCustomRegisterer(device: LocalDevice, isNew: boolean) {\n    this.registerCallback?.(device, (error: ErrorInfo, deviceRegistration?: DeviceRegistration) => {\n      if (error) {\n        if (isNew) {\n          this.handleEvent(new GettingDeviceRegistrationFailed(error));\n        } else {\n          this.handleEvent(new SyncRegistrationFailed(error));\n        }\n        return;\n      }\n\n      if (!deviceRegistration) {\n        this.handleEvent(\n          new GettingDeviceRegistrationFailed(\n            new this.client.ErrorInfo('registerCallback did not return deviceRegistration', 40000, 400),\n          ),\n        );\n      }\n\n      if (isNew) {\n        this.handleEvent(new GotDeviceRegistration(deviceRegistration as any));\n      } else {\n        this.handleEvent(new RegistrationSynced());\n      }\n    });\n  }\n\n  callCustomDeregisterer(device: LocalDevice) {\n    this.deregisterCallback?.(device, (err: ErrorInfo) => {\n      if (err) {\n        this.handleEvent(new DeregistrationFailed(err));\n        return;\n      }\n      this.handleEvent(new Deregistered());\n    });\n  }\n\n  async updateRegistration() {\n    const localDevice = this.client.device as LocalDevice;\n    if (this.registerCallback) {\n      this.callCustomRegisterer(localDevice, false);\n    } else {\n      const client = this.client;\n      const format = client.options.useBinaryProtocol\n          ? this.client.Utils.Format.msgpack\n          : this.client.Utils.Format.json,\n        body = client.rest.DeviceDetails.fromLocalDevice(localDevice),\n        headers = this.client.Defaults.defaultPostHeaders(this.client.options, { format }),\n        params = {};\n\n      if (client.options.headers) {\n        this.client.Utils.mixin(headers, client.options.headers);\n      }\n\n      if (client.options.pushFullWait) {\n        this.client.Utils.mixin(params, { fullWait: 'true' });\n      }\n\n      const requestBody = this.client.Utils.encodeBody(body, client._MsgPack, format);\n      const authDetails = localDevice.getAuthDetails(client, headers, params);\n      try {\n        const response = await this.client.rest.Resource.patch(\n          client,\n          '/push/deviceRegistrations',\n          requestBody,\n          authDetails.headers,\n          authDetails.params,\n          format,\n          true,\n        );\n        this.handleEvent(new GotDeviceRegistration(response.body as DeviceRegistration));\n      } catch (err) {\n        this.handleEvent(new GettingDeviceRegistrationFailed(err as ErrorInfo));\n      }\n    }\n  }\n\n  async deregister() {\n    const device = this.client.device as LocalDevice;\n    if (this.deregisterCallback) {\n      this.callCustomDeregisterer(device);\n    } else {\n      const rest = this.client;\n      const format = rest.options.useBinaryProtocol ? this.client.Utils.Format.msgpack : this.client.Utils.Format.json,\n        headers = this.client.Defaults.defaultPostHeaders(rest.options, { format }),\n        params = { deviceId: device.id };\n\n      if (rest.options.headers) this.client.Utils.mixin(headers, rest.options.headers);\n\n      if (rest.options.pushFullWait) this.client.Utils.mixin(params, { fullWait: 'true' });\n\n      try {\n        await this.client.rest.Resource.delete(rest, '/push/deviceRegistrations', headers, params, format, true);\n        this.handleEvent(new Deregistered());\n      } catch (err) {\n        this.handleEvent(new DeregistrationFailed(err as ErrorInfo));\n      }\n    }\n  }\n\n  callActivatedCallback(err: ErrorInfo | null) {\n    this.activatedCallback?.(err);\n    delete this.activatedCallback;\n  }\n\n  callDeactivatedCallback(err: ErrorInfo | null) {\n    this.deactivatedCallback?.(err);\n    delete this.deactivatedCallback;\n  }\n\n  handleEvent(event: ActivationEvent) {\n    if (this.handling) {\n      this.client.Platform.Config.nextTick(() => {\n        this.handleEvent(event);\n      });\n      return;\n    }\n\n    this.handling = true;\n    this.client.Logger.logAction(\n      this.client.logger,\n      this.client.Logger.LOG_MAJOR,\n      'Push.ActivationStateMachine.handleEvent()',\n      'handling event ' + event.name + ' from ' + this.current.name,\n    );\n\n    let maybeNext = this.current.processEvent(this, event);\n    if (!maybeNext) {\n      this.client.Logger.logAction(\n        this.client.logger,\n        this.client.Logger.LOG_MAJOR,\n        'Push.ActivationStateMachine.handleEvent()',\n        'enqueing event: ' + event.name,\n      );\n      this.pendingEvents.push(event);\n      this.handling = false;\n      return;\n    }\n\n    this.client.Logger.logAction(\n      this.client.logger,\n      this.client.Logger.LOG_MAJOR,\n      'Push.ActivationStateMachine.handleEvent()',\n      'transition: ' + this.current.name + ' -(' + event.name + ')-> ' + maybeNext.name,\n    );\n    this.current = maybeNext;\n\n    while (this.pendingEvents.length > 0) {\n      const pending = this.pendingEvents[0];\n\n      this.client.Logger.logAction(\n        this.client.logger,\n        this.client.Logger.LOG_MAJOR,\n        'Push.ActivationStateMachine.handleEvent()',\n        'attempting to consume pending event: ' + pending.name,\n      );\n\n      maybeNext = this.current.processEvent(this, pending);\n      if (!maybeNext) {\n        break;\n      }\n      this.pendingEvents.splice(0, 1);\n\n      this.client.Logger.logAction(\n        this.client.logger,\n        this.client.Logger.LOG_MAJOR,\n        'Push.ActivationStateMachine.handleEvent()',\n        'transition: ' + this.current.name + ' -(' + pending.name + ')-> ' + maybeNext.name,\n      );\n      this.current = maybeNext;\n    }\n\n    this.persist();\n    this.handling = false;\n  }\n}\n\n// Events\nexport class CalledActivate {\n  name = 'CalledActivate';\n\n  constructor(machine: ActivationStateMachine, registerCallback?: RegisterCallback) {\n    if (registerCallback) {\n      machine.registerCallback = registerCallback;\n    }\n    machine.persist();\n  }\n}\n\nexport class CalledDeactivate {\n  name = 'CalledDeactivate';\n\n  constructor(machine: ActivationStateMachine, deregisterCallback?: DeregisterCallback) {\n    machine.deregisterCallback = deregisterCallback;\n    machine.persist();\n  }\n}\n\nexport class GotPushDeviceDetails {\n  name = 'GotPushDeviceDetails';\n}\n\nexport class GettingPushDeviceDetailsFailed {\n  name = 'GettingPushDeviceDetailsFailed';\n  reason: ErrorInfo;\n\n  constructor(reason: ErrorInfo) {\n    this.reason = reason;\n  }\n}\n\nclass GotDeviceRegistration {\n  name = 'GotDeviceRegistration';\n  tokenDetails: API.TokenDetails;\n\n  constructor(deviceRegistration: DeviceRegistration) {\n    this.tokenDetails = deviceRegistration.deviceIdentityToken;\n  }\n}\n\nclass GettingDeviceRegistrationFailed {\n  name = 'GettingDeviceRegistrationFailed';\n  reason: ErrorInfo;\n  constructor(reason: ErrorInfo) {\n    this.reason = reason;\n  }\n}\n\nclass RegistrationSynced {\n  name = 'RegistrationSynced';\n}\n\nclass SyncRegistrationFailed {\n  name = 'SyncRegistrationFailed';\n  reason: ErrorInfo;\n\n  constructor(reason: ErrorInfo) {\n    this.reason = reason;\n  }\n}\n\nclass Deregistered {\n  name = 'Deregistered';\n}\n\nclass DeregistrationFailed {\n  name = 'DeregistrationFailed';\n  reason: ErrorInfo;\n  constructor(reason: ErrorInfo) {\n    this.reason = reason;\n  }\n}\n\ntype ActivationEvent =\n  | CalledActivate\n  | CalledDeactivate\n  | GotPushDeviceDetails\n  | GettingPushDeviceDetailsFailed\n  | GotDeviceRegistration\n  | GettingDeviceRegistrationFailed\n  | RegistrationSynced\n  | SyncRegistrationFailed\n  | Deregistered\n  | DeregistrationFailed;\n\n// States\nabstract class ActivationState {\n  name: ActivationStateName;\n\n  constructor(name: ActivationStateName) {\n    this.name = name;\n  }\n\n  abstract processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null;\n}\n\nclass NotActivated extends ActivationState {\n  constructor() {\n    super('NotActivated');\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null {\n    if (event instanceof CalledDeactivate) {\n      machine.callDeactivatedCallback(null);\n      return new NotActivated();\n    } else if (event instanceof CalledActivate) {\n      const device = machine.client.device as LocalDevice;\n\n      if (device.deviceIdentityToken != null) {\n        if (device.clientId && device.clientId !== machine.client.auth.clientId) {\n          machine.handleEvent(\n            new SyncRegistrationFailed(\n              new machine.client.ErrorInfo('clientId not compatible with local device clientId', 61002, 400),\n            ),\n          );\n          return null;\n        }\n        // Already registered.\n        machine.pendingEvents.push(event);\n        return new WaitingForNewPushDeviceDetails();\n      }\n\n      if (device.push.recipient) {\n        machine.pendingEvents.push(new GotPushDeviceDetails());\n      } else if (machine.pushConfig.getPushDeviceDetails) {\n        machine.pushConfig.getPushDeviceDetails?.(machine);\n      } else if (machine.pushConfig.platform === DevicePlatform.Browser) {\n        getW3CPushDeviceDetails(machine);\n      } else {\n        machine.handleEvent(\n          new GettingPushDeviceDetailsFailed(\n            new machine.client.ErrorInfo('No available implementation to get push device details', 50000, 500),\n          ),\n        );\n      }\n\n      return new WaitingForPushDeviceDetails();\n    } else if (event instanceof GotPushDeviceDetails) {\n      return new NotActivated();\n    }\n    return null;\n  }\n}\n\nclass WaitingForPushDeviceDetails extends ActivationState {\n  constructor() {\n    super('WaitingForPushDeviceDetails');\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\n    if (event instanceof CalledActivate) {\n      return new WaitingForPushDeviceDetails();\n    } else if (event instanceof CalledDeactivate) {\n      machine.callDeactivatedCallback(null);\n      return new NotActivated();\n    } else if (event instanceof GotPushDeviceDetails) {\n      const client = machine.client;\n      const device = client.device as LocalDevice;\n\n      if (machine.registerCallback) {\n        machine.callCustomRegisterer(device, true);\n      } else {\n        const format = client.options.useBinaryProtocol\n            ? machine.client.Utils.Format.msgpack\n            : machine.client.Utils.Format.json,\n          body = client.rest.DeviceDetails.fromLocalDevice(device),\n          headers = machine.client.Defaults.defaultPostHeaders(client.options, { format }),\n          params = {};\n\n        if (client.options.headers) machine.client.Utils.mixin(headers, client.options.headers);\n\n        if (client.options.pushFullWait) machine.client.Utils.mixin(params, { fullWait: 'true' });\n\n        const requestBody = machine.client.Utils.encodeBody(body, client._MsgPack, format);\n\n        machine.client.rest.Resource.post(client, '/push/deviceRegistrations', requestBody, headers, params, null, true)\n          .then((response) => {\n            const deviceDetails = response.unpacked\n              ? response.body\n              : client.rest.DeviceDetails.fromResponseBody(response.body as any, client._MsgPack, format);\n            machine.handleEvent(new GotDeviceRegistration(deviceDetails as DeviceRegistration));\n          })\n          .catch((err) => {\n            machine.handleEvent(new GettingDeviceRegistrationFailed(err as ErrorInfo));\n          });\n      }\n\n      return new WaitingForDeviceRegistration();\n    } else if (event instanceof GettingPushDeviceDetailsFailed) {\n      machine.callActivatedCallback(event.reason);\n      return new NotActivated();\n    }\n    return null;\n  }\n}\n\nclass WaitingForDeviceRegistration extends ActivationState {\n  constructor() {\n    super('WaitingForDeviceRegistration');\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\n    if (event instanceof CalledActivate) {\n      return new WaitingForDeviceRegistration();\n    } else if (event instanceof GotDeviceRegistration) {\n      const device = machine.client.device as LocalDevice;\n      device.deviceIdentityToken = event.tokenDetails.token;\n      device.persist();\n      machine.callActivatedCallback(null);\n      return new WaitingForNewPushDeviceDetails();\n    } else if (event instanceof GettingDeviceRegistrationFailed) {\n      machine.callActivatedCallback(event.reason);\n      return new NotActivated();\n    }\n    return null;\n  }\n}\n\nclass WaitingForNewPushDeviceDetails extends ActivationState {\n  constructor() {\n    super('WaitingForNewPushDeviceDetails');\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\n    if (event instanceof CalledActivate) {\n      machine.callActivatedCallback(null);\n      return new WaitingForNewPushDeviceDetails();\n    } else if (event instanceof CalledDeactivate) {\n      machine.deregister();\n      return new WaitingForDeregistration(this);\n    } else if (event instanceof GotPushDeviceDetails) {\n      machine.updateRegistration();\n      return new WaitingForRegistrationSync();\n    }\n    return null;\n  }\n}\n\nclass WaitingForRegistrationSync extends ActivationState {\n  triggeredByCalledActivate: boolean | null;\n\n  constructor(triggeredByCalledActivate: boolean | null = false) {\n    super('WaitingForRegistrationSync');\n    this.triggeredByCalledActivate = triggeredByCalledActivate;\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\n    if (event instanceof CalledActivate && !this.triggeredByCalledActivate) {\n      machine.callActivatedCallback(null);\n      return new WaitingForRegistrationSync(true);\n    } else if (event instanceof RegistrationSynced) {\n      return new WaitingForNewPushDeviceDetails();\n    } else if (event instanceof SyncRegistrationFailed) {\n      machine.callUpdateRegistrationFailedCallback(event.reason);\n      return new AfterRegistrationSyncFailed();\n    }\n    return null;\n  }\n}\n\nclass AfterRegistrationSyncFailed extends ActivationState {\n  constructor() {\n    super('AfterRegistrationSyncFailed');\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent) {\n    if (event instanceof CalledActivate || event instanceof GotPushDeviceDetails) {\n      machine.updateRegistration();\n      return new WaitingForRegistrationSync(event instanceof CalledActivate);\n    } else if (event instanceof CalledDeactivate) {\n      machine.deregister();\n      return new WaitingForDeregistration(this);\n    }\n    return null;\n  }\n}\n\nclass WaitingForDeregistration extends ActivationState {\n  previousState: ActivationState | null;\n\n  constructor(previousState: ActivationState | null) {\n    super('WaitingForDeregistration');\n    this.previousState = previousState;\n  }\n\n  processEvent(machine: ActivationStateMachine, event: ActivationEvent): ActivationState | null {\n    if (event instanceof CalledDeactivate) {\n      return new WaitingForDeregistration(this.previousState);\n    } else if (event instanceof Deregistered) {\n      const device = machine.client.device as LocalDevice;\n      delete device.deviceIdentityToken;\n      delete device.push.recipient;\n      device.resetId();\n      device.persist();\n      machine.callDeactivatedCallback(null);\n      return new NotActivated();\n    } else if (event instanceof DeregistrationFailed) {\n      machine.callDeactivatedCallback(event.reason);\n      return this.previousState;\n    }\n    return null;\n  }\n}\n\ntype ActivationStateName =\n  | 'NotActivated'\n  | 'WaitingForPushDeviceDetails'\n  | 'WaitingForDeviceRegistration'\n  | 'WaitingForNewPushDeviceDetails'\n  | 'WaitingForRegistrationSync'\n  | 'AfterRegistrationSyncFailed'\n  | 'WaitingForDeregistration';\n\nexport const ActivationStates = {\n  NotActivated,\n  WaitingForPushDeviceDetails,\n  WaitingForDeviceRegistration,\n  WaitingForNewPushDeviceDetails,\n  WaitingForRegistrationSync,\n  AfterRegistrationSyncFailed,\n  WaitingForDeregistration,\n};\n\nfunction isPersistentState(state: ActivationState) {\n  return state.name == 'NotActivated' || state.name == 'WaitingForNewPushDeviceDetails';\n}\n"],
  "mappings": "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",
  "names": ["GettingPushDeviceDetailsFailed", "GotPushDeviceDetails", "ErrorInfo", "Platform"]
}
